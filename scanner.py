import sys
import platform
import argparse
import time
import os
import ctypes # Para verificar admin no windows

# Importa as fun√ß√µes dos outros m√≥dulos
from scan_ports import scan_ports
from check_firewall import check_firewall_status
from check_updates import check_pending_updates
from check_antivirus import check_antivirus_status
from check_users import check_local_users
from check_encryption import check_disk_encryption, is_admin # Adicionado is_admin daqui tamb√©m
from report_generator import generate_pdf_report

def main():
    start_time = time.time()
    # Verifica se √© admin logo no in√≠cio (importante para Bitlocker e talvez usu√°rios)
    admin_privileges = is_admin() if platform.system() == "Windows" else False

    print("\n==============================================")
    print("üõ°Ô∏è   ZenithScan - Scanner de Seguran√ßa Local  üõ°Ô∏è")
    print("==============================================")
    if platform.system() == "Windows":
        print(f"[INFO] Executando como Administrador: {'Sim' if admin_privileges else 'N√£o'}")
        if not admin_privileges:
             print("[AVISO] Algumas verifica√ß√µes (ex: BitLocker, detalhes de usu√°rios) podem requerer execu√ß√£o como Administrador.")


    # --- Argumentos ---
    parser = argparse.ArgumentParser(description="Realiza verifica√ß√µes de seguran√ßa locais e gera um relat√≥rio.")
    parser.add_argument("--host", default="127.0.0.1", help="Host para escanear portas (padr√£o: 127.0.0.1)")
    parser.add_argument("--start-port", type=int, default=1, help="Porta inicial para scan (padr√£o: 1)")
    parser.add_argument("--end-port", type=int, default=1024, help="Porta final para scan (padr√£o: 1024)")
    parser.add_argument("--threads", type=int, default=100, help="Threads para scan de portas (padr√£o: 100)")
    parser.add_argument("--timeout", type=float, default=0.5, help="Timeout de conex√£o por porta em segundos (padr√£o: 0.5)")
    parser.add_argument("--output", default="relatorio_zenithscan.pdf", help="Nome do arquivo PDF de sa√≠da (padr√£o: relatorio_zenithscan.pdf)")
    parser.add_argument("--skip-updates", action="store_true", help="Pular verifica√ß√£o de atualiza√ß√µes")
    parser.add_argument("--skip-antivirus", action="store_true", help="Pular verifica√ß√£o de antiv√≠rus")
    parser.add_argument("--skip-users", action="store_true", help="Pular verifica√ß√£o de contas de usu√°rio")
    parser.add_argument("--skip-encryption", action="store_true", help="Pular verifica√ß√£o de criptografia de disco")

    args = parser.parse_args()

    # --- Valida√ß√µes e Infos Iniciais ---
    if not (0 < args.start_port <= 65535 and 0 < args.end_port <= 65535 and args.start_port <= args.end_port): print("Erro: Range de portas inv√°lido."); sys.exit(1)
    if args.threads <= 0: print("Erro: N√∫mero de threads deve ser positivo."); sys.exit(1)
    if args.timeout <= 0: print("Erro: Timeout deve ser positivo."); sys.exit(1)

    print(f"\nIniciando varredura em {time.strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"Sistema Operacional: {platform.system()} {platform.release()}")
    if platform.system() == "Linux" and os.geteuid() != 0: print("[AVISO] No Linux, 'sudo' pode ser necess√°rio para updates.")
    elif platform.system() == "Windows":
         try: import win32com.client; print("[INFO] M√≥dulo 'pywin32' encontrado.")
         except ImportError: print("[AVISO] M√≥dulo 'pywin32' n√£o encontrado (necess√°rio para updates). Instale: pip install pywin32")
    print("-" * 46)


    # --- 1. Scan de Portas ---
    print("\n1. üîì Escaneando portas abertas...")
    open_ports = []
    try:
        open_ports = scan_ports(args.host, args.start_port, args.end_port, max_threads=args.threads, timeout=args.timeout)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado durante o scan de portas: {e}")
    print("-" * 46)


    # --- 2. Verifica√ß√£o de Firewall ---
    print("\n2. üî• Verificando status do firewall...")
    firewall_data = {}
    try:
        firewall_data = check_firewall_status()
        print(f"   Resultado: OS={firewall_data.get('os', 'N/A')}, Status={firewall_data.get('status', 'N/A')}")
        if firewall_data.get('error'): print(f"   ‚ö†Ô∏è Aviso/Erro: {firewall_data['error']}")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado durante a verifica√ß√£o do firewall: {e}")
        firewall_data = {"os": platform.system(), "status": "Error", "error": f"Falha na chamada: {e}"}
    print("-" * 46)


    # --- 3. Verifica√ß√£o de Atualiza√ß√µes ---
    update_data = {}
    if not args.skip_updates:
        print("\n3. üïí Verificando atualiza√ß√µes pendentes...")
        try:
            update_data = check_pending_updates()
            print(f"   Resultado: OS={update_data.get('os', 'N/A')}, Status={update_data.get('status', 'N/A')}, Contagem={update_data.get('count', 0)}")
            if update_data.get('error'): print(f"   ‚ö†Ô∏è Aviso/Erro: {update_data['error']}")
        except Exception as e:
            print(f"\n‚ùå Erro inesperado durante a verifica√ß√£o de atualiza√ß√µes: {e}")
            update_data = {"os": platform.system(), "status": "Error", "error": f"Falha na chamada: {e}"}
    else:
        print("\n3. üïí Verifica√ß√£o de atualiza√ß√µes pulada (--skip-updates).")
        update_data = {"os": platform.system(), "status": "Skipped", "error": "Verifica√ß√£o pulada pelo usu√°rio."}
    print("-" * 46)

    # --- 4. Verifica√ß√£o de Antiv√≠rus ---
    av_data = {}
    if not args.skip_antivirus:
        print("\n4. üõ°Ô∏è Verificando status do antiv√≠rus...")
        try:
            av_data = check_antivirus_status()
            print(f"   Resultado: Status={av_data.get('status', 'N/A')}")
            if av_data.get('error'): print(f"   ‚ö†Ô∏è Aviso/Erro: {av_data['error']}")
            if av_data.get('products'):
                 for p in av_data['products']:
                     status_str = f"Ativo={format_bool(p.get('enabled'))}"
                     if p.get('enabled'): status_str += f", Atualizado={format_bool(p.get('updated'))}"
                     print(f"     - Produto: {p.get('name', 'N/A')} ({status_str})")
        except Exception as e:
            print(f"\n‚ùå Erro inesperado durante a verifica√ß√£o de antiv√≠rus: {e}")
            av_data = {"os": platform.system(), "status": "Error", "error": f"Falha na chamada: {e}"}
    else:
        print("\n4. üõ°Ô∏è Verifica√ß√£o de antiv√≠rus pulada (--skip-antivirus).")
        av_data = {"os": platform.system(), "status": "Skipped", "error": "Verifica√ß√£o pulada pelo usu√°rio."}
    print("-" * 46)


    # --- 5. Verifica√ß√£o de Contas de Usu√°rio ---
    users_data = {}
    if not args.skip_users:
        print("\n5. üë§ Verificando contas de usu√°rio locais...")
        try:
            users_data = check_local_users()
            print(f"   Resultado: Status={users_data.get('status', 'N/A')}, Usu√°rios Analisados={len(users_data.get('users', []))}") # Mudado texto
            if users_data.get('error'): print(f"   ‚ö†Ô∏è Aviso/Erro: {users_data['error']}")
            if users_data.get('users'):
                for u in users_data['users'][:5]: # Mostra resumo dos 5 primeiros
                     status_parts = []
                     if u.get('active') is not None: status_parts.append(f"Ativo={format_bool(u.get('active'))}")
                     if u.get('password_expires') is not None: status_parts.append(f"Senha Expira={format_bool(u.get('password_expires'))}")
                     if u.get('is_admin') is not None: status_parts.append(f"Admin(SID)?={format_bool(u.get('is_admin'))}")
                     error_str = f", Erro='{u.get('error')}'" if u.get('error') else ""
                     print(f"     - {u.get('username','?')} ({', '.join(status_parts)}{error_str})")
                if len(users_data['users']) > 5: print("       ...")
        except Exception as e:
            print(f"\n‚ùå Erro inesperado durante a verifica√ß√£o de usu√°rios: {e}")
            users_data = {"os": platform.system(), "status": "Error", "error": f"Falha na chamada: {e}"}
    else:
        print("\n5. üë§ Verifica√ß√£o de contas de usu√°rio pulada (--skip-users).")
        users_data = {"os": platform.system(), "status": "Skipped", "error": "Verifica√ß√£o pulada pelo usu√°rio."}
    print("-" * 46)


    # --- 6. Verifica√ß√£o de Criptografia de Disco ---
    encryption_data = {}
    if not args.skip_encryption:
        print("\n6. üíø Verificando criptografia de disco (BitLocker)...")
        if platform.system() == "Windows" and not admin_privileges:
             print("   [ERRO] Necess√°rio executar como Administrador para esta verifica√ß√£o.")
             encryption_data = {"os": "Windows", "drive":"C", "status": "Error", "protection":"Unknown", "error": "Requer privil√©gios de Administrador."}
        else:
             try:
                 encryption_data = check_disk_encryption()
                 print(f"   Resultado (Drive {encryption_data.get('drive', '?')}): Status={encryption_data.get('status', 'N/A')}, Prote√ß√£o={encryption_data.get('protection', 'N/A')}")
                 if encryption_data.get('error'): print(f"   ‚ö†Ô∏è Aviso/Erro: {encryption_data['error']}")
             except Exception as e:
                 print(f"\n‚ùå Erro inesperado durante a verifica√ß√£o de criptografia: {e}")
                 encryption_data = {"os": platform.system(), "drive":"C", "status": "Error", "protection":"Unknown", "error": f"Falha na chamada: {e}"}
    else:
        print("\n6. üíø Verifica√ß√£o de criptografia pulada (--skip-encryption).")
        encryption_data = {"os": platform.system(), "drive":"C", "status": "Skipped", "protection":"Unknown", "error": "Verifica√ß√£o pulada pelo usu√°rio."}
    print("-" * 46)


    # --- 7. Gera√ß√£o do Relat√≥rio --- (N√∫mero muda para 7)
    print("\n7. üìù Gerando relat√≥rio em PDF...")
    try:
        # Passa todos os dados coletados
        generate_pdf_report(open_ports, firewall_data, update_data, av_data, users_data, encryption_data, args.output)
    except Exception as e:
         print(f"\n‚ùå Erro inesperado durante a chamada da gera√ß√£o do relat√≥rio: {e}")


    # --- Finaliza√ß√£o ---
    end_time = time.time()
    print("-" * 46)
    print(f"\n‚úÖ Verifica√ß√£o conclu√≠da em {end_time - start_time:.2f} segundos.")
    print("-" * 46)

    try: input("\nPressione ENTER para sair...")
    except EOFError: pass

# Adiciona a fun√ß√£o format_bool que agora tamb√©m √© usada aqui no scanner
def format_bool(value):
    if value is True: return "Sim"
    if value is False: return "N√£o"
    return "?"

if __name__ == "__main__":
    main()